'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.832
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("AfilarDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class AfilarDataSet
    Inherits System.Data.DataSet
    
    Private tabledetallehojaderuta As detallehojaderutaDataTable
    
    Private tablehojaderuta As hojaderutaDataTable
    
    Private relationFK_detallehojaderuta_hojaderuta As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("detallehojaderuta")) Is Nothing) Then
                MyBase.Tables.Add(New detallehojaderutaDataTable(ds.Tables("detallehojaderuta")))
            End If
            If (Not (ds.Tables("hojaderuta")) Is Nothing) Then
                MyBase.Tables.Add(New hojaderutaDataTable(ds.Tables("hojaderuta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property detallehojaderuta() As detallehojaderutaDataTable
        Get
            Return Me.tabledetallehojaderuta
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property hojaderuta() As hojaderutaDataTable
        Get
            Return Me.tablehojaderuta
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As AfilarDataSet = CType(MyBase.Clone,AfilarDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("detallehojaderuta")) Is Nothing) Then
                MyBase.Tables.Add(New detallehojaderutaDataTable(ds.Tables("detallehojaderuta")))
            End If
            If (Not (ds.Tables("hojaderuta")) Is Nothing) Then
                MyBase.Tables.Add(New hojaderutaDataTable(ds.Tables("hojaderuta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledetallehojaderuta = CType(MyBase.Tables("detallehojaderuta"),detallehojaderutaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledetallehojaderuta) Is Nothing) Then
                Me.tabledetallehojaderuta.InitVars
            End If
        End If
        Me.tablehojaderuta = CType(MyBase.Tables("hojaderuta"),hojaderutaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehojaderuta) Is Nothing) Then
                Me.tablehojaderuta.InitVars
            End If
        End If
        Me.relationFK_detallehojaderuta_hojaderuta = Me.Relations("FK_detallehojaderuta_hojaderuta")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "AfilarDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/AfilarDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledetallehojaderuta = New detallehojaderutaDataTable
        MyBase.Tables.Add(Me.tabledetallehojaderuta)
        Me.tablehojaderuta = New hojaderutaDataTable
        MyBase.Tables.Add(Me.tablehojaderuta)
        Me.relationFK_detallehojaderuta_hojaderuta = New System.Data.DataRelation("FK_detallehojaderuta_hojaderuta", New System.Data.DataColumn() {Me.tablehojaderuta.idhojaderutaColumn}, New System.Data.DataColumn() {Me.tabledetallehojaderuta.idhojaderutaColumn}, false)
        Me.Relations.Add(Me.relationFK_detallehojaderuta_hojaderuta)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedetallehojaderuta() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializehojaderuta() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As AfilarDataSet = New AfilarDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub detallehojaderutaRowChangeEventHandler(ByVal sender As Object, ByVal e As detallehojaderutaRowChangeEvent)
    
    Public Delegate Sub hojaderutaRowChangeEventHandler(ByVal sender As Object, ByVal e As hojaderutaRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class detallehojaderutaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnidhojaderuta As System.Data.DataColumn
        
        Private columnidetapadefabricacion As System.Data.DataColumn
        
        Private columnidlegajo As System.Data.DataColumn
        
        Private columnidtorneado As System.Data.DataColumn
        
        Private columnfechahorainicioreal As System.Data.DataColumn
        
        Private columnfechahorainicioplanificada As System.Data.DataColumn
        
        Private columnfechahorafinreal As System.Data.DataColumn
        
        Private columnfechahorafinplanificada As System.Data.DataColumn
        
        Private columnobservaciones As System.Data.DataColumn
        
        Private columnidmaquina As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "detallehojaderuta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idhojaderutaColumn() As System.Data.DataColumn
            Get
                Return Me.columnidhojaderuta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idetapadefabricacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnidetapadefabricacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idlegajoColumn() As System.Data.DataColumn
            Get
                Return Me.columnidlegajo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idtorneadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnidtorneado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahorainiciorealColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechahorainicioreal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahorainicioplanificadaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechahorainicioplanificada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahorafinrealColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechahorafinreal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahorafinplanificadaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechahorafinplanificada
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property observacionesColumn() As System.Data.DataColumn
            Get
                Return Me.columnobservaciones
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idmaquinaColumn() As System.Data.DataColumn
            Get
                Return Me.columnidmaquina
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As detallehojaderutaRow
            Get
                Return CType(Me.Rows(index),detallehojaderutaRow)
            End Get
        End Property
        
        Public Event detallehojaderutaRowChanging As detallehojaderutaRowChangeEventHandler
        
        Public Event detallehojaderutaRowChanged As detallehojaderutaRowChangeEventHandler
        
        Public Event detallehojaderutaRowDeleting As detallehojaderutaRowChangeEventHandler
        
        Public Event detallehojaderutaRowDeleted As detallehojaderutaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddetallehojaderutaRow(ByVal row As detallehojaderutaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddetallehojaderutaRow(ByVal parenthojaderutaRowByFK_detallehojaderuta_hojaderuta As hojaderutaRow, ByVal idetapadefabricacion As Integer, ByVal idlegajo As Integer, ByVal idtorneado As Integer, ByVal fechahorainicioreal As Date, ByVal fechahorainicioplanificada As Date, ByVal fechahorafinreal As Date, ByVal fechahorafinplanificada As Date, ByVal observaciones As String, ByVal idmaquina As Integer) As detallehojaderutaRow
            Dim rowdetallehojaderutaRow As detallehojaderutaRow = CType(Me.NewRow,detallehojaderutaRow)
            rowdetallehojaderutaRow.ItemArray = New Object() {parenthojaderutaRowByFK_detallehojaderuta_hojaderuta(0), idetapadefabricacion, idlegajo, idtorneado, fechahorainicioreal, fechahorainicioplanificada, fechahorafinreal, fechahorafinplanificada, observaciones, idmaquina}
            Me.Rows.Add(rowdetallehojaderutaRow)
            Return rowdetallehojaderutaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByidhojaderutaidetapadefabricacion(ByVal idhojaderuta As Integer, ByVal idetapadefabricacion As Integer) As detallehojaderutaRow
            Return CType(Me.Rows.Find(New Object() {idhojaderuta, idetapadefabricacion}),detallehojaderutaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As detallehojaderutaDataTable = CType(MyBase.Clone,detallehojaderutaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New detallehojaderutaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidhojaderuta = MyBase.Columns("idhojaderuta")
            Me.columnidetapadefabricacion = MyBase.Columns("idetapadefabricacion")
            Me.columnidlegajo = MyBase.Columns("idlegajo")
            Me.columnidtorneado = MyBase.Columns("idtorneado")
            Me.columnfechahorainicioreal = MyBase.Columns("fechahorainicioreal")
            Me.columnfechahorainicioplanificada = MyBase.Columns("fechahorainicioplanificada")
            Me.columnfechahorafinreal = MyBase.Columns("fechahorafinreal")
            Me.columnfechahorafinplanificada = MyBase.Columns("fechahorafinplanificada")
            Me.columnobservaciones = MyBase.Columns("observaciones")
            Me.columnidmaquina = MyBase.Columns("idmaquina")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidhojaderuta = New System.Data.DataColumn("idhojaderuta", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidhojaderuta)
            Me.columnidetapadefabricacion = New System.Data.DataColumn("idetapadefabricacion", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidetapadefabricacion)
            Me.columnidlegajo = New System.Data.DataColumn("idlegajo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidlegajo)
            Me.columnidtorneado = New System.Data.DataColumn("idtorneado", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidtorneado)
            Me.columnfechahorainicioreal = New System.Data.DataColumn("fechahorainicioreal", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahorainicioreal)
            Me.columnfechahorainicioplanificada = New System.Data.DataColumn("fechahorainicioplanificada", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahorainicioplanificada)
            Me.columnfechahorafinreal = New System.Data.DataColumn("fechahorafinreal", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahorafinreal)
            Me.columnfechahorafinplanificada = New System.Data.DataColumn("fechahorafinplanificada", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahorafinplanificada)
            Me.columnobservaciones = New System.Data.DataColumn("observaciones", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobservaciones)
            Me.columnidmaquina = New System.Data.DataColumn("idmaquina", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidmaquina)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnidhojaderuta, Me.columnidetapadefabricacion}, true))
            Me.columnidhojaderuta.AllowDBNull = false
            Me.columnidetapadefabricacion.AllowDBNull = false
            Me.columnobservaciones.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdetallehojaderutaRow() As detallehojaderutaRow
            Return CType(Me.NewRow,detallehojaderutaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New detallehojaderutaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(detallehojaderutaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.detallehojaderutaRowChangedEvent) Is Nothing) Then
                RaiseEvent detallehojaderutaRowChanged(Me, New detallehojaderutaRowChangeEvent(CType(e.Row,detallehojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.detallehojaderutaRowChangingEvent) Is Nothing) Then
                RaiseEvent detallehojaderutaRowChanging(Me, New detallehojaderutaRowChangeEvent(CType(e.Row,detallehojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.detallehojaderutaRowDeletedEvent) Is Nothing) Then
                RaiseEvent detallehojaderutaRowDeleted(Me, New detallehojaderutaRowChangeEvent(CType(e.Row,detallehojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.detallehojaderutaRowDeletingEvent) Is Nothing) Then
                RaiseEvent detallehojaderutaRowDeleting(Me, New detallehojaderutaRowChangeEvent(CType(e.Row,detallehojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedetallehojaderutaRow(ByVal row As detallehojaderutaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As AfilarDataSet = New AfilarDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "detallehojaderutaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class hojaderutaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnidhojaderuta As System.Data.DataColumn
        
        Private columnfechainicioproduccion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "hojaderuta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idhojaderutaColumn() As System.Data.DataColumn
            Get
                Return Me.columnidhojaderuta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechainicioproduccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechainicioproduccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As hojaderutaRow
            Get
                Return CType(Me.Rows(index),hojaderutaRow)
            End Get
        End Property
        
        Public Event hojaderutaRowChanging As hojaderutaRowChangeEventHandler
        
        Public Event hojaderutaRowChanged As hojaderutaRowChangeEventHandler
        
        Public Event hojaderutaRowDeleting As hojaderutaRowChangeEventHandler
        
        Public Event hojaderutaRowDeleted As hojaderutaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddhojaderutaRow(ByVal row As hojaderutaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddhojaderutaRow(ByVal idhojaderuta As Integer, ByVal fechainicioproduccion As Date) As hojaderutaRow
            Dim rowhojaderutaRow As hojaderutaRow = CType(Me.NewRow,hojaderutaRow)
            rowhojaderutaRow.ItemArray = New Object() {idhojaderuta, fechainicioproduccion}
            Me.Rows.Add(rowhojaderutaRow)
            Return rowhojaderutaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByidhojaderuta(ByVal idhojaderuta As Integer) As hojaderutaRow
            Return CType(Me.Rows.Find(New Object() {idhojaderuta}),hojaderutaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As hojaderutaDataTable = CType(MyBase.Clone,hojaderutaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New hojaderutaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidhojaderuta = MyBase.Columns("idhojaderuta")
            Me.columnfechainicioproduccion = MyBase.Columns("fechainicioproduccion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidhojaderuta = New System.Data.DataColumn("idhojaderuta", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidhojaderuta)
            Me.columnfechainicioproduccion = New System.Data.DataColumn("fechainicioproduccion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechainicioproduccion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnidhojaderuta}, true))
            Me.columnidhojaderuta.AllowDBNull = false
            Me.columnidhojaderuta.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewhojaderutaRow() As hojaderutaRow
            Return CType(Me.NewRow,hojaderutaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New hojaderutaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(hojaderutaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.hojaderutaRowChangedEvent) Is Nothing) Then
                RaiseEvent hojaderutaRowChanged(Me, New hojaderutaRowChangeEvent(CType(e.Row,hojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.hojaderutaRowChangingEvent) Is Nothing) Then
                RaiseEvent hojaderutaRowChanging(Me, New hojaderutaRowChangeEvent(CType(e.Row,hojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.hojaderutaRowDeletedEvent) Is Nothing) Then
                RaiseEvent hojaderutaRowDeleted(Me, New hojaderutaRowChangeEvent(CType(e.Row,hojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.hojaderutaRowDeletingEvent) Is Nothing) Then
                RaiseEvent hojaderutaRowDeleting(Me, New hojaderutaRowChangeEvent(CType(e.Row,hojaderutaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovehojaderutaRow(ByVal row As hojaderutaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As AfilarDataSet = New AfilarDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "hojaderutaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class detallehojaderutaRow
        Inherits System.Data.DataRow
        
        Private tabledetallehojaderuta As detallehojaderutaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledetallehojaderuta = CType(Me.Table,detallehojaderutaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idhojaderuta() As Integer
            Get
                Return CType(Me(Me.tabledetallehojaderuta.idhojaderutaColumn),Integer)
            End Get
            Set
                Me(Me.tabledetallehojaderuta.idhojaderutaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idetapadefabricacion() As Integer
            Get
                Return CType(Me(Me.tabledetallehojaderuta.idetapadefabricacionColumn),Integer)
            End Get
            Set
                Me(Me.tabledetallehojaderuta.idetapadefabricacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idlegajo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.idlegajoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idlegajo' de la tabla 'detallehojaderuta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.idlegajoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idtorneado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.idtorneadoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idtorneado' de la tabla 'detallehojaderuta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.idtorneadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahorainicioreal() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.fechahorainiciorealColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechahorainicioreal' de la tabla 'detallehojaderuta' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.fechahorainiciorealColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahorainicioplanificada() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.fechahorainicioplanificadaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechahorainicioplanificada' de la tabla 'detallehojaderut"& _ 
                            "a' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.fechahorainicioplanificadaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahorafinreal() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.fechahorafinrealColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechahorafinreal' de la tabla 'detallehojaderuta' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.fechahorafinrealColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahorafinplanificada() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.fechahorafinplanificadaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechahorafinplanificada' de la tabla 'detallehojaderuta' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.fechahorafinplanificadaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.observacionesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'observaciones' de la tabla 'detallehojaderuta' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.observacionesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idmaquina() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledetallehojaderuta.idmaquinaColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idmaquina' de la tabla 'detallehojaderuta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledetallehojaderuta.idmaquinaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hojaderutaRow() As hojaderutaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_detallehojaderuta_hojaderuta")),hojaderutaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_detallehojaderuta_hojaderuta"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidlegajoNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.idlegajoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidlegajoNull()
            Me(Me.tabledetallehojaderuta.idlegajoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidtorneadoNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.idtorneadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidtorneadoNull()
            Me(Me.tabledetallehojaderuta.idtorneadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahorainiciorealNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.fechahorainiciorealColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahorainiciorealNull()
            Me(Me.tabledetallehojaderuta.fechahorainiciorealColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahorainicioplanificadaNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.fechahorainicioplanificadaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahorainicioplanificadaNull()
            Me(Me.tabledetallehojaderuta.fechahorainicioplanificadaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahorafinrealNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.fechahorafinrealColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahorafinrealNull()
            Me(Me.tabledetallehojaderuta.fechahorafinrealColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahorafinplanificadaNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.fechahorafinplanificadaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahorafinplanificadaNull()
            Me(Me.tabledetallehojaderuta.fechahorafinplanificadaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.observacionesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobservacionesNull()
            Me(Me.tabledetallehojaderuta.observacionesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidmaquinaNull() As Boolean
            Return Me.IsNull(Me.tabledetallehojaderuta.idmaquinaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidmaquinaNull()
            Me(Me.tabledetallehojaderuta.idmaquinaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class hojaderutaRow
        Inherits System.Data.DataRow
        
        Private tablehojaderuta As hojaderutaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehojaderuta = CType(Me.Table,hojaderutaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idhojaderuta() As Integer
            Get
                Return CType(Me(Me.tablehojaderuta.idhojaderutaColumn),Integer)
            End Get
            Set
                Me(Me.tablehojaderuta.idhojaderutaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechainicioproduccion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablehojaderuta.fechainicioproduccionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechainicioproduccion' de la tabla 'hojaderuta' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablehojaderuta.fechainicioproduccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechainicioproduccionNull() As Boolean
            Return Me.IsNull(Me.tablehojaderuta.fechainicioproduccionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechainicioproduccionNull()
            Me(Me.tablehojaderuta.fechainicioproduccionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetdetallehojaderutaRows() As detallehojaderutaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_detallehojaderuta_hojaderuta")),detallehojaderutaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class detallehojaderutaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As detallehojaderutaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As detallehojaderutaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As detallehojaderutaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class hojaderutaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As hojaderutaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As hojaderutaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As hojaderutaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace AfilarDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class detallehojaderutaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "detallehojaderuta"
            tableMapping.ColumnMappings.Add("idhojaderuta", "idhojaderuta")
            tableMapping.ColumnMappings.Add("idetapadefabricacion", "idetapadefabricacion")
            tableMapping.ColumnMappings.Add("idlegajo", "idlegajo")
            tableMapping.ColumnMappings.Add("idtorneado", "idtorneado")
            tableMapping.ColumnMappings.Add("fechahorainicioreal", "fechahorainicioreal")
            tableMapping.ColumnMappings.Add("fechahorainicioplanificada", "fechahorainicioplanificada")
            tableMapping.ColumnMappings.Add("fechahorafinreal", "fechahorafinreal")
            tableMapping.ColumnMappings.Add("fechahorafinplanificada", "fechahorafinplanificada")
            tableMapping.ColumnMappings.Add("observaciones", "observaciones")
            tableMapping.ColumnMappings.Add("idmaquina", "idmaquina")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[detallehojaderuta] WHERE (([idhojaderuta] = @Original_idhojade"& _ 
                "ruta) AND ([idetapadefabricacion] = @Original_idetapadefabricacion) AND ((@IsNul"& _ 
                "l_idlegajo = 1 AND [idlegajo] IS NULL) OR ([idlegajo] = @Original_idlegajo)) AND"& _ 
                " ((@IsNull_idtorneado = 1 AND [idtorneado] IS NULL) OR ([idtorneado] = @Original"& _ 
                "_idtorneado)) AND ((@IsNull_fechahorainicioreal = 1 AND [fechahorainicioreal] IS"& _ 
                " NULL) OR ([fechahorainicioreal] = @Original_fechahorainicioreal)) AND ((@IsNull"& _ 
                "_fechahorainicioplanificada = 1 AND [fechahorainicioplanificada] IS NULL) OR ([f"& _ 
                "echahorainicioplanificada] = @Original_fechahorainicioplanificada)) AND ((@IsNul"& _ 
                "l_fechahorafinreal = 1 AND [fechahorafinreal] IS NULL) OR ([fechahorafinreal] = "& _ 
                "@Original_fechahorafinreal)) AND ((@IsNull_fechahorafinplanificada = 1 AND [fech"& _ 
                "ahorafinplanificada] IS NULL) OR ([fechahorafinplanificada] = @Original_fechahor"& _ 
                "afinplanificada)) AND ((@IsNull_observaciones = 1 AND [observaciones] IS NULL) O"& _ 
                "R ([observaciones] = @Original_observaciones)) AND ((@IsNull_idmaquina = 1 AND ["& _ 
                "idmaquina] IS NULL) OR ([idmaquina] = @Original_idmaquina)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idetapadefabricacion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idetapadefabricacion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_idlegajo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idlegajo", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idlegajo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idlegajo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_idtorneado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idtorneado", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idtorneado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idtorneado", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorainicioreal", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioreal", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorainicioreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioreal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorainicioplanificada", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioplanificada", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorainicioplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioplanificada", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorafinreal", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinreal", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorafinreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinreal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorafinplanificada", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinplanificada", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorafinplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinplanificada", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_observaciones", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "observaciones", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_observaciones", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "observaciones", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_idmaquina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idmaquina", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idmaquina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idmaquina", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[detallehojaderuta] ([idhojaderuta], [idetapadefabricacion], [i"& _ 
                "dlegajo], [idtorneado], [fechahorainicioreal], [fechahorainicioplanificada], [fe"& _ 
                "chahorafinreal], [fechahorafinplanificada], [observaciones], [idmaquina]) VALUES"& _ 
                " (@idhojaderuta, @idetapadefabricacion, @idlegajo, @idtorneado, @fechahorainicio"& _ 
                "real, @fechahorainicioplanificada, @fechahorafinreal, @fechahorafinplanificada, "& _ 
                "@observaciones, @idmaquina);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT idhojaderuta, idetapadefabricacion, idlegaj"& _ 
                "o, idtorneado, fechahorainicioreal, fechahorainicioplanificada, fechahorafinreal"& _ 
                ", fechahorafinplanificada, observaciones, idmaquina FROM detallehojaderuta WHERE"& _ 
                " (idetapadefabricacion = @idetapadefabricacion) AND (idhojaderuta = @idhojaderut"& _ 
                "a)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idetapadefabricacion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idetapadefabricacion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idlegajo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idlegajo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idtorneado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idtorneado", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorainicioreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioreal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorainicioplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioplanificada", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorafinreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinreal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorafinplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinplanificada", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@observaciones", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "observaciones", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idmaquina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idmaquina", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[detallehojaderuta] SET [idhojaderuta] = @idhojaderuta, [idetapadefa"& _ 
                "bricacion] = @idetapadefabricacion, [idlegajo] = @idlegajo, [idtorneado] = @idto"& _ 
                "rneado, [fechahorainicioreal] = @fechahorainicioreal, [fechahorainicioplanificad"& _ 
                "a] = @fechahorainicioplanificada, [fechahorafinreal] = @fechahorafinreal, [fecha"& _ 
                "horafinplanificada] = @fechahorafinplanificada, [observaciones] = @observaciones"& _ 
                ", [idmaquina] = @idmaquina WHERE (([idhojaderuta] = @Original_idhojaderuta) AND "& _ 
                "([idetapadefabricacion] = @Original_idetapadefabricacion) AND ((@IsNull_idlegajo"& _ 
                " = 1 AND [idlegajo] IS NULL) OR ([idlegajo] = @Original_idlegajo)) AND ((@IsNull"& _ 
                "_idtorneado = 1 AND [idtorneado] IS NULL) OR ([idtorneado] = @Original_idtornead"& _ 
                "o)) AND ((@IsNull_fechahorainicioreal = 1 AND [fechahorainicioreal] IS NULL) OR "& _ 
                "([fechahorainicioreal] = @Original_fechahorainicioreal)) AND ((@IsNull_fechahora"& _ 
                "inicioplanificada = 1 AND [fechahorainicioplanificada] IS NULL) OR ([fechahorain"& _ 
                "icioplanificada] = @Original_fechahorainicioplanificada)) AND ((@IsNull_fechahor"& _ 
                "afinreal = 1 AND [fechahorafinreal] IS NULL) OR ([fechahorafinreal] = @Original_"& _ 
                "fechahorafinreal)) AND ((@IsNull_fechahorafinplanificada = 1 AND [fechahorafinpl"& _ 
                "anificada] IS NULL) OR ([fechahorafinplanificada] = @Original_fechahorafinplanif"& _ 
                "icada)) AND ((@IsNull_observaciones = 1 AND [observaciones] IS NULL) OR ([observ"& _ 
                "aciones] = @Original_observaciones)) AND ((@IsNull_idmaquina = 1 AND [idmaquina]"& _ 
                " IS NULL) OR ([idmaquina] = @Original_idmaquina)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT idhojaderuta, idetap"& _ 
                "adefabricacion, idlegajo, idtorneado, fechahorainicioreal, fechahorainicioplanif"& _ 
                "icada, fechahorafinreal, fechahorafinplanificada, observaciones, idmaquina FROM "& _ 
                "detallehojaderuta WHERE (idetapadefabricacion = @idetapadefabricacion) AND (idho"& _ 
                "jaderuta = @idhojaderuta)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idetapadefabricacion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idetapadefabricacion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idlegajo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idlegajo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idtorneado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idtorneado", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorainicioreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioreal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorainicioplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioplanificada", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorafinreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinreal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechahorafinplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinplanificada", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@observaciones", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "observaciones", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idmaquina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idmaquina", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idetapadefabricacion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idetapadefabricacion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_idlegajo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idlegajo", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idlegajo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idlegajo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_idtorneado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idtorneado", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idtorneado", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idtorneado", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorainicioreal", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioreal", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorainicioreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioreal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorainicioplanificada", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioplanificada", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorainicioplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorainicioplanificada", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorafinreal", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinreal", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorafinreal", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinreal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechahorafinplanificada", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinplanificada", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechahorafinplanificada", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechahorafinplanificada", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_observaciones", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "observaciones", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_observaciones", System.Data.SqlDbType.[Char], 0, System.Data.ParameterDirection.Input, 0, 0, "observaciones", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_idmaquina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idmaquina", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idmaquina", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idmaquina", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Afilar.My.MySettings.Default.AfilarConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT idhojaderuta, idetapadefabricacion, idlegajo, idtorneado, fechahorainicior"& _ 
                "eal, fechahorainicioplanificada, fechahorafinreal, fechahorafinplanificada, obse"& _ 
                "rvaciones, idmaquina FROM dbo.detallehojaderuta"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AfilarDataSet.detallehojaderutaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AfilarDataSet.detallehojaderutaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AfilarDataSet.detallehojaderutaDataTable = New AfilarDataSet.detallehojaderutaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AfilarDataSet.detallehojaderutaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AfilarDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "detallehojaderuta")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_idhojaderuta As Integer, ByVal Original_idetapadefabricacion As Integer, ByVal Original_idlegajo As System.Nullable(Of Integer), ByVal Original_idtorneado As System.Nullable(Of Integer), ByVal Original_fechahorainicioreal As System.Nullable(Of Date), ByVal Original_fechahorainicioplanificada As System.Nullable(Of Date), ByVal Original_fechahorafinreal As System.Nullable(Of Date), ByVal Original_fechahorafinplanificada As System.Nullable(Of Date), ByVal Original_observaciones As String, ByVal Original_idmaquina As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_idhojaderuta,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_idetapadefabricacion,Integer)
            If (Original_idlegajo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_idlegajo.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_idtorneado.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_idtorneado.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_fechahorainicioreal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_fechahorainicioreal.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Original_fechahorainicioplanificada.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_fechahorainicioplanificada.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_fechahorafinreal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_fechahorafinreal.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Original_fechahorafinplanificada.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_fechahorafinplanificada.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Original_observaciones Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_observaciones,String)
            End If
            If (Original_idmaquina.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_idmaquina.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal idhojaderuta As Integer, ByVal idetapadefabricacion As Integer, ByVal idlegajo As System.Nullable(Of Integer), ByVal idtorneado As System.Nullable(Of Integer), ByVal fechahorainicioreal As System.Nullable(Of Date), ByVal fechahorainicioplanificada As System.Nullable(Of Date), ByVal fechahorafinreal As System.Nullable(Of Date), ByVal fechahorafinplanificada As System.Nullable(Of Date), ByVal observaciones As String, ByVal idmaquina As System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(idhojaderuta,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(idetapadefabricacion,Integer)
            If (idlegajo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(idlegajo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (idtorneado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(idtorneado.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (fechahorainicioreal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(fechahorainicioreal.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (fechahorainicioplanificada.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(fechahorainicioplanificada.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (fechahorafinreal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(fechahorafinreal.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (fechahorafinplanificada.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(fechahorafinplanificada.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (observaciones Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(observaciones,String)
            End If
            If (idmaquina.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(idmaquina.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal idhojaderuta As Integer,  _
                    ByVal idetapadefabricacion As Integer,  _
                    ByVal idlegajo As System.Nullable(Of Integer),  _
                    ByVal idtorneado As System.Nullable(Of Integer),  _
                    ByVal fechahorainicioreal As System.Nullable(Of Date),  _
                    ByVal fechahorainicioplanificada As System.Nullable(Of Date),  _
                    ByVal fechahorafinreal As System.Nullable(Of Date),  _
                    ByVal fechahorafinplanificada As System.Nullable(Of Date),  _
                    ByVal observaciones As String,  _
                    ByVal idmaquina As System.Nullable(Of Integer),  _
                    ByVal Original_idhojaderuta As Integer,  _
                    ByVal Original_idetapadefabricacion As Integer,  _
                    ByVal Original_idlegajo As System.Nullable(Of Integer),  _
                    ByVal Original_idtorneado As System.Nullable(Of Integer),  _
                    ByVal Original_fechahorainicioreal As System.Nullable(Of Date),  _
                    ByVal Original_fechahorainicioplanificada As System.Nullable(Of Date),  _
                    ByVal Original_fechahorafinreal As System.Nullable(Of Date),  _
                    ByVal Original_fechahorafinplanificada As System.Nullable(Of Date),  _
                    ByVal Original_observaciones As String,  _
                    ByVal Original_idmaquina As System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(idhojaderuta,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(idetapadefabricacion,Integer)
            If (idlegajo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(idlegajo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (idtorneado.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(idtorneado.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (fechahorainicioreal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(fechahorainicioreal.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (fechahorainicioplanificada.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(fechahorainicioplanificada.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (fechahorafinreal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(fechahorafinreal.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (fechahorafinplanificada.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(fechahorafinplanificada.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (observaciones Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(observaciones,String)
            End If
            If (idmaquina.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(idmaquina.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_idhojaderuta,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_idetapadefabricacion,Integer)
            If (Original_idlegajo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_idlegajo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Original_idtorneado.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_idtorneado.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (Original_fechahorainicioreal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_fechahorainicioreal.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_fechahorainicioplanificada.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_fechahorainicioplanificada.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (Original_fechahorafinreal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_fechahorafinreal.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (Original_fechahorafinplanificada.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_fechahorafinplanificada.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            End If
            If (Original_observaciones Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_observaciones,String)
            End If
            If (Original_idmaquina.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_idmaquina.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class hojaderutaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "hojaderuta"
            tableMapping.ColumnMappings.Add("idhojaderuta", "idhojaderuta")
            tableMapping.ColumnMappings.Add("fechainicioproduccion", "fechainicioproduccion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[hojaderuta] WHERE (([idhojaderuta] = @Original_idhojaderuta) A"& _ 
                "ND ((@IsNull_fechainicioproduccion = 1 AND [fechainicioproduccion] IS NULL) OR ("& _ 
                "[fechainicioproduccion] = @Original_fechainicioproduccion)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechainicioproduccion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechainicioproduccion", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechainicioproduccion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechainicioproduccion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[hojaderuta] ([idhojaderuta], [fechainicioproduccion]) VALUES ("& _ 
                "@idhojaderuta, @fechainicioproduccion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT idhojaderuta, fechainicioproducc"& _ 
                "ion FROM hojaderuta WHERE (idhojaderuta = @idhojaderuta)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechainicioproduccion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechainicioproduccion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[hojaderuta] SET [idhojaderuta] = @idhojaderuta, [fechainicioproducc"& _ 
                "ion] = @fechainicioproduccion WHERE (([idhojaderuta] = @Original_idhojaderuta) A"& _ 
                "ND ((@IsNull_fechainicioproduccion = 1 AND [fechainicioproduccion] IS NULL) OR ("& _ 
                "[fechainicioproduccion] = @Original_fechainicioproduccion)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT idhojaderu"& _ 
                "ta, fechainicioproduccion FROM hojaderuta WHERE (idhojaderuta = @idhojaderuta)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fechainicioproduccion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechainicioproduccion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_idhojaderuta", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "idhojaderuta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_fechainicioproduccion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "fechainicioproduccion", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fechainicioproduccion", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fechainicioproduccion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Afilar.My.MySettings.Default.AfilarConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT idhojaderuta, fechainicioproduccion FROM dbo.hojaderuta"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As AfilarDataSet.hojaderutaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As AfilarDataSet.hojaderutaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As AfilarDataSet.hojaderutaDataTable = New AfilarDataSet.hojaderutaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As AfilarDataSet.hojaderutaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As AfilarDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "hojaderuta")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_idhojaderuta As Integer, ByVal Original_fechainicioproduccion As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_idhojaderuta,Integer)
            If (Original_fechainicioproduccion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_fechainicioproduccion.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal idhojaderuta As Integer, ByVal fechainicioproduccion As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(idhojaderuta,Integer)
            If (fechainicioproduccion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(fechainicioproduccion.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal idhojaderuta As Integer, ByVal fechainicioproduccion As System.Nullable(Of Date), ByVal Original_idhojaderuta As Integer, ByVal Original_fechainicioproduccion As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(idhojaderuta,Integer)
            If (fechainicioproduccion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(fechainicioproduccion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_idhojaderuta,Integer)
            If (Original_fechainicioproduccion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_fechainicioproduccion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
