'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.832
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DSDetallePedido"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSDetallePedido
    Inherits System.Data.DataSet
    
    Private tablePedido As PedidoDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Pedido")) Is Nothing) Then
                MyBase.Tables.Add(New PedidoDataTable(ds.Tables("Pedido")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pedido() As PedidoDataTable
        Get
            Return Me.tablePedido
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DSDetallePedido = CType(MyBase.Clone,DSDetallePedido)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Pedido")) Is Nothing) Then
                MyBase.Tables.Add(New PedidoDataTable(ds.Tables("Pedido")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePedido = CType(MyBase.Tables("Pedido"),PedidoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePedido) Is Nothing) Then
                Me.tablePedido.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSDetallePedido"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSDetallePedido.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePedido = New PedidoDataTable
        MyBase.Tables.Add(Me.tablePedido)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePedido() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSDetallePedido = New DSDetallePedido
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub PedidoRowChangeEventHandler(ByVal sender As Object, ByVal e As PedidoRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PedidoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnidpedido As System.Data.DataColumn
        
        Private columnfechaentrega As System.Data.DataColumn
        
        Private columnfecharealizacion As System.Data.DataColumn
        
        Private columnidestado As System.Data.DataColumn
        
        Private columnprioridad As System.Data.DataColumn
        
        Private columnidcliente As System.Data.DataColumn
        
        Private columnidvendedor As System.Data.DataColumn
        
        Private columnidformadeentrega As System.Data.DataColumn
        
        Private columnidempresa As System.Data.DataColumn
        
        Private columnidviajante As System.Data.DataColumn
        
        Private columnfecharealentrega As System.Data.DataColumn
        
        Private columnestadoPedido As System.Data.DataColumn
        
        Private columnestadoFresa As System.Data.DataColumn
        
        Private columnnroserie As System.Data.DataColumn
        
        Private columnfechafinfabricacion As System.Data.DataColumn
        
        Private columnestado As System.Data.DataColumn
        
        Private columnnombreFresa As System.Data.DataColumn
        
        Private columnnombreCliente As System.Data.DataColumn
        
        Private columnapellidoCliente As System.Data.DataColumn
        
        Private columnidtipo As System.Data.DataColumn
        
        Private columnidmodelo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pedido"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idpedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnidpedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaentregaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechaentrega
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecharealizacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecharealizacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idestadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnidestado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prioridadColumn() As System.Data.DataColumn
            Get
                Return Me.columnprioridad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idclienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnidcliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idvendedorColumn() As System.Data.DataColumn
            Get
                Return Me.columnidvendedor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idformadeentregaColumn() As System.Data.DataColumn
            Get
                Return Me.columnidformadeentrega
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idempresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnidempresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idviajanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnidviajante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecharealentregaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecharealentrega
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoPedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnestadoPedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoFresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnestadoFresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroserieColumn() As System.Data.DataColumn
            Get
                Return Me.columnnroserie
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechafinfabricacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnfechafinfabricacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreFresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombreFresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombreCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property apellidoClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnapellidoCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idtipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnidtipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idmodeloColumn() As System.Data.DataColumn
            Get
                Return Me.columnidmodelo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PedidoRow
            Get
                Return CType(Me.Rows(index),PedidoRow)
            End Get
        End Property
        
        Public Event PedidoRowChanging As PedidoRowChangeEventHandler
        
        Public Event PedidoRowChanged As PedidoRowChangeEventHandler
        
        Public Event PedidoRowDeleting As PedidoRowChangeEventHandler
        
        Public Event PedidoRowDeleted As PedidoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPedidoRow(ByVal row As PedidoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPedidoRow( _
                    ByVal idpedido As Decimal,  _
                    ByVal fechaentrega As Date,  _
                    ByVal fecharealizacion As Date,  _
                    ByVal idestado As Integer,  _
                    ByVal prioridad As Integer,  _
                    ByVal idcliente As Integer,  _
                    ByVal idvendedor As Integer,  _
                    ByVal idformadeentrega As Integer,  _
                    ByVal idempresa As Integer,  _
                    ByVal idviajante As Integer,  _
                    ByVal fecharealentrega As Date,  _
                    ByVal estadoPedido As String,  _
                    ByVal estadoFresa As String,  _
                    ByVal nroserie As Integer,  _
                    ByVal fechafinfabricacion As Date,  _
                    ByVal estado As Integer,  _
                    ByVal nombreFresa As String,  _
                    ByVal nombreCliente As String,  _
                    ByVal apellidoCliente As String,  _
                    ByVal idtipo As Integer,  _
                    ByVal idmodelo As Integer) As PedidoRow
            Dim rowPedidoRow As PedidoRow = CType(Me.NewRow,PedidoRow)
            rowPedidoRow.ItemArray = New Object() {idpedido, fechaentrega, fecharealizacion, idestado, prioridad, idcliente, idvendedor, idformadeentrega, idempresa, idviajante, fecharealentrega, estadoPedido, estadoFresa, nroserie, fechafinfabricacion, estado, nombreFresa, nombreCliente, apellidoCliente, idtipo, idmodelo}
            Me.Rows.Add(rowPedidoRow)
            Return rowPedidoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByidpedido(ByVal idpedido As Decimal) As PedidoRow
            Return CType(Me.Rows.Find(New Object() {idpedido}),PedidoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PedidoDataTable = CType(MyBase.Clone,PedidoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PedidoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidpedido = MyBase.Columns("idpedido")
            Me.columnfechaentrega = MyBase.Columns("fechaentrega")
            Me.columnfecharealizacion = MyBase.Columns("fecharealizacion")
            Me.columnidestado = MyBase.Columns("idestado")
            Me.columnprioridad = MyBase.Columns("prioridad")
            Me.columnidcliente = MyBase.Columns("idcliente")
            Me.columnidvendedor = MyBase.Columns("idvendedor")
            Me.columnidformadeentrega = MyBase.Columns("idformadeentrega")
            Me.columnidempresa = MyBase.Columns("idempresa")
            Me.columnidviajante = MyBase.Columns("idviajante")
            Me.columnfecharealentrega = MyBase.Columns("fecharealentrega")
            Me.columnestadoPedido = MyBase.Columns("estadoPedido")
            Me.columnestadoFresa = MyBase.Columns("estadoFresa")
            Me.columnnroserie = MyBase.Columns("nroserie")
            Me.columnfechafinfabricacion = MyBase.Columns("fechafinfabricacion")
            Me.columnestado = MyBase.Columns("estado")
            Me.columnnombreFresa = MyBase.Columns("nombreFresa")
            Me.columnnombreCliente = MyBase.Columns("nombreCliente")
            Me.columnapellidoCliente = MyBase.Columns("apellidoCliente")
            Me.columnidtipo = MyBase.Columns("idtipo")
            Me.columnidmodelo = MyBase.Columns("idmodelo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidpedido = New System.Data.DataColumn("idpedido", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidpedido)
            Me.columnfechaentrega = New System.Data.DataColumn("fechaentrega", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaentrega)
            Me.columnfecharealizacion = New System.Data.DataColumn("fecharealizacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecharealizacion)
            Me.columnidestado = New System.Data.DataColumn("idestado", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidestado)
            Me.columnprioridad = New System.Data.DataColumn("prioridad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprioridad)
            Me.columnidcliente = New System.Data.DataColumn("idcliente", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidcliente)
            Me.columnidvendedor = New System.Data.DataColumn("idvendedor", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidvendedor)
            Me.columnidformadeentrega = New System.Data.DataColumn("idformadeentrega", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidformadeentrega)
            Me.columnidempresa = New System.Data.DataColumn("idempresa", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidempresa)
            Me.columnidviajante = New System.Data.DataColumn("idviajante", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidviajante)
            Me.columnfecharealentrega = New System.Data.DataColumn("fecharealentrega", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecharealentrega)
            Me.columnestadoPedido = New System.Data.DataColumn("estadoPedido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestadoPedido)
            Me.columnestadoFresa = New System.Data.DataColumn("estadoFresa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestadoFresa)
            Me.columnnroserie = New System.Data.DataColumn("nroserie", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroserie)
            Me.columnfechafinfabricacion = New System.Data.DataColumn("fechafinfabricacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechafinfabricacion)
            Me.columnestado = New System.Data.DataColumn("estado", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columnnombreFresa = New System.Data.DataColumn("nombreFresa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombreFresa)
            Me.columnnombreCliente = New System.Data.DataColumn("nombreCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombreCliente)
            Me.columnapellidoCliente = New System.Data.DataColumn("apellidoCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapellidoCliente)
            Me.columnidtipo = New System.Data.DataColumn("idtipo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidtipo)
            Me.columnidmodelo = New System.Data.DataColumn("idmodelo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidmodelo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnidpedido}, true))
            Me.columnidpedido.AllowDBNull = false
            Me.columnidpedido.Unique = true
            Me.columnestadoPedido.MaxLength = 40
            Me.columnestadoFresa.MaxLength = 40
            Me.columnnroserie.AllowDBNull = false
            Me.columnnombreFresa.MaxLength = 100
            Me.columnnombreCliente.AllowDBNull = false
            Me.columnnombreCliente.MaxLength = 50
            Me.columnapellidoCliente.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPedidoRow() As PedidoRow
            Return CType(Me.NewRow,PedidoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PedidoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PedidoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PedidoRowChangedEvent) Is Nothing) Then
                RaiseEvent PedidoRowChanged(Me, New PedidoRowChangeEvent(CType(e.Row,PedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PedidoRowChangingEvent) Is Nothing) Then
                RaiseEvent PedidoRowChanging(Me, New PedidoRowChangeEvent(CType(e.Row,PedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PedidoRowDeletedEvent) Is Nothing) Then
                RaiseEvent PedidoRowDeleted(Me, New PedidoRowChangeEvent(CType(e.Row,PedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PedidoRowDeletingEvent) Is Nothing) Then
                RaiseEvent PedidoRowDeleting(Me, New PedidoRowChangeEvent(CType(e.Row,PedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePedidoRow(ByVal row As PedidoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSDetallePedido = New DSDetallePedido
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PedidoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PedidoRow
        Inherits System.Data.DataRow
        
        Private tablePedido As PedidoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePedido = CType(Me.Table,PedidoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idpedido() As Decimal
            Get
                Return CType(Me(Me.tablePedido.idpedidoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePedido.idpedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaentrega() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedido.fechaentregaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechaentrega' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.fechaentregaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecharealizacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedido.fecharealizacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fecharealizacion' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.fecharealizacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idestado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idestadoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idestado' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idestadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prioridad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.prioridadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'prioridad' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.prioridadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idcliente() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idclienteColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idcliente' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idclienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idvendedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idvendedorColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idvendedor' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idvendedorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idformadeentrega() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idformadeentregaColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idformadeentrega' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idformadeentregaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idempresa() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idempresaColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idempresa' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idempresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idviajante() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idviajanteColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idviajante' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idviajanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecharealentrega() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedido.fecharealentregaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fecharealentrega' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.fecharealentregaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estadoPedido() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedido.estadoPedidoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'estadoPedido' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.estadoPedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estadoFresa() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedido.estadoFresaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'estadoFresa' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.estadoFresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroserie() As Integer
            Get
                Return CType(Me(Me.tablePedido.nroserieColumn),Integer)
            End Get
            Set
                Me(Me.tablePedido.nroserieColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechafinfabricacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePedido.fechafinfabricacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fechafinfabricacion' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.fechafinfabricacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.estadoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.estadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombreFresa() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedido.nombreFresaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nombreFresa' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.nombreFresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombreCliente() As String
            Get
                Return CType(Me(Me.tablePedido.nombreClienteColumn),String)
            End Get
            Set
                Me(Me.tablePedido.nombreClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apellidoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablePedido.apellidoClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'apellidoCliente' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.apellidoClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idtipo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idtipoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idtipo' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idtipoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idmodelo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePedido.idmodeloColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idmodelo' de la tabla 'Pedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePedido.idmodeloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaentregaNull() As Boolean
            Return Me.IsNull(Me.tablePedido.fechaentregaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaentregaNull()
            Me(Me.tablePedido.fechaentregaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecharealizacionNull() As Boolean
            Return Me.IsNull(Me.tablePedido.fecharealizacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecharealizacionNull()
            Me(Me.tablePedido.fecharealizacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidestadoNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idestadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidestadoNull()
            Me(Me.tablePedido.idestadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprioridadNull() As Boolean
            Return Me.IsNull(Me.tablePedido.prioridadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprioridadNull()
            Me(Me.tablePedido.prioridadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidclienteNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idclienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidclienteNull()
            Me(Me.tablePedido.idclienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidvendedorNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idvendedorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidvendedorNull()
            Me(Me.tablePedido.idvendedorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidformadeentregaNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idformadeentregaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidformadeentregaNull()
            Me(Me.tablePedido.idformadeentregaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidempresaNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idempresaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidempresaNull()
            Me(Me.tablePedido.idempresaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidviajanteNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idviajanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidviajanteNull()
            Me(Me.tablePedido.idviajanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecharealentregaNull() As Boolean
            Return Me.IsNull(Me.tablePedido.fecharealentregaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecharealentregaNull()
            Me(Me.tablePedido.fecharealentregaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoPedidoNull() As Boolean
            Return Me.IsNull(Me.tablePedido.estadoPedidoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoPedidoNull()
            Me(Me.tablePedido.estadoPedidoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoFresaNull() As Boolean
            Return Me.IsNull(Me.tablePedido.estadoFresaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoFresaNull()
            Me(Me.tablePedido.estadoFresaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechafinfabricacionNull() As Boolean
            Return Me.IsNull(Me.tablePedido.fechafinfabricacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechafinfabricacionNull()
            Me(Me.tablePedido.fechafinfabricacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tablePedido.estadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tablePedido.estadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreFresaNull() As Boolean
            Return Me.IsNull(Me.tablePedido.nombreFresaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreFresaNull()
            Me(Me.tablePedido.nombreFresaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsapellidoClienteNull() As Boolean
            Return Me.IsNull(Me.tablePedido.apellidoClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetapellidoClienteNull()
            Me(Me.tablePedido.apellidoClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidtipoNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idtipoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidtipoNull()
            Me(Me.tablePedido.idtipoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidmodeloNull() As Boolean
            Return Me.IsNull(Me.tablePedido.idmodeloColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidmodeloNull()
            Me(Me.tablePedido.idmodeloColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PedidoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PedidoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PedidoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PedidoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSDetallePedidoTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PedidoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pedido"
            tableMapping.ColumnMappings.Add("idpedido", "idpedido")
            tableMapping.ColumnMappings.Add("fechaentrega", "fechaentrega")
            tableMapping.ColumnMappings.Add("fecharealizacion", "fecharealizacion")
            tableMapping.ColumnMappings.Add("idestado", "idestado")
            tableMapping.ColumnMappings.Add("prioridad", "prioridad")
            tableMapping.ColumnMappings.Add("idcliente", "idcliente")
            tableMapping.ColumnMappings.Add("idvendedor", "idvendedor")
            tableMapping.ColumnMappings.Add("idformadeentrega", "idformadeentrega")
            tableMapping.ColumnMappings.Add("idempresa", "idempresa")
            tableMapping.ColumnMappings.Add("idviajante", "idviajante")
            tableMapping.ColumnMappings.Add("fecharealentrega", "fecharealentrega")
            tableMapping.ColumnMappings.Add("estadoPedido", "estadoPedido")
            tableMapping.ColumnMappings.Add("estadoFresa", "estadoFresa")
            tableMapping.ColumnMappings.Add("nroserie", "nroserie")
            tableMapping.ColumnMappings.Add("fechafinfabricacion", "fechafinfabricacion")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("nombreFresa", "nombreFresa")
            tableMapping.ColumnMappings.Add("nombreCliente", "nombreCliente")
            tableMapping.ColumnMappings.Add("apellidoCliente", "apellidoCliente")
            tableMapping.ColumnMappings.Add("idtipo", "idtipo")
            tableMapping.ColumnMappings.Add("idmodelo", "idmodelo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Afilar.My.MySettings.Default.AfilarConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Pedido.idpedido, Pedido.fechaentrega, Pedido.fecharealizacion, Pedido."& _ 
                "idestado, Pedido.prioridad, Pedido.idcliente, Pedido.idvendedor, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         Pedido.idformadeentrega, Pedido.idempresa, Pedido.idviajante, Pedido.fe"& _ 
                "charealentrega, estado_1.nombre AS estadoPedido, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      estado."& _ 
                "nombre AS estadoFresa, fresa.nroserie, fresa.fechafinfabricacion, fresa.estado, "& _ 
                "tipofresa.nombre AS nombreFresa, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      cliente.nombre AS nombr"& _ 
                "eCliente, cliente.apellido AS apellidoCliente, fresa.idtipo, fresa.idmodelo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M         Pedido INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      fresa ON Pedido.idpedido = fr"& _ 
                "esa.nropedido INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      estado ON fresa.estado = estado."& _ 
                "idestado INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      cliente ON Pedido.idcliente = cliente"& _ 
                ".idcliente INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      estado AS estado_1 ON Pedido.idesta"& _ 
                "do = estado_1.idestado INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      tipofresa ON fresa.idti"& _ 
                "po = tipofresa.idtipo AND fresa.idmodelo = tipofresa.idmodelo"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSDetallePedido.PedidoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSDetallePedido.PedidoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSDetallePedido.PedidoDataTable = New DSDetallePedido.PedidoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
