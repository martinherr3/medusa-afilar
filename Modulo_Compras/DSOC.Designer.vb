'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsoc"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsoc
    Inherits System.Data.DataSet
    
    Private tableordencompramp As ordencomprampDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ordencompramp")) Is Nothing) Then
                MyBase.Tables.Add(New ordencomprampDataTable(ds.Tables("ordencompramp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ordencompramp() As ordencomprampDataTable
        Get
            Return Me.tableordencompramp
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsoc = CType(MyBase.Clone,dsoc)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ordencompramp")) Is Nothing) Then
                MyBase.Tables.Add(New ordencomprampDataTable(ds.Tables("ordencompramp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableordencompramp = CType(MyBase.Tables("ordencompramp"),ordencomprampDataTable)
        If (initTable = true) Then
            If (Not (Me.tableordencompramp) Is Nothing) Then
                Me.tableordencompramp.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsoc"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsoc.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-AR")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableordencompramp = New ordencomprampDataTable
        MyBase.Tables.Add(Me.tableordencompramp)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeordencompramp() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsoc = New dsoc
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ordencomprampRowChangeEventHandler(ByVal sender As Object, ByVal e As ordencomprampRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ordencomprampDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnExpr1 As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        Private columnExpr2 As System.Data.DataColumn
        
        Private columnExpr3 As System.Data.DataColumn
        
        Private columnfecharealizacion As System.Data.DataColumn
        
        Private columnplazodeentrega As System.Data.DataColumn
        
        Private columnidordencompra As System.Data.DataColumn
        
        Private columnnroorden As System.Data.DataColumn
        
        Private columncondicionesdepago As System.Data.DataColumn
        
        Private columncausa As System.Data.DataColumn
        
        Private columnidestado As System.Data.DataColumn
        
        Private columnidproveedor As System.Data.DataColumn
        
        Private columnExpr4 As System.Data.DataColumn
        
        Private columnidtipomateriaprima As System.Data.DataColumn
        
        Private columncantidad As System.Data.DataColumn
        
        Private columnprecio As System.Data.DataColumn
        
        Private columnExpr5 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ordencompramp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr2Column() As System.Data.DataColumn
            Get
                Return Me.columnExpr2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr3Column() As System.Data.DataColumn
            Get
                Return Me.columnExpr3
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecharealizacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecharealizacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property plazodeentregaColumn() As System.Data.DataColumn
            Get
                Return Me.columnplazodeentrega
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idordencompraColumn() As System.Data.DataColumn
            Get
                Return Me.columnidordencompra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nroordenColumn() As System.Data.DataColumn
            Get
                Return Me.columnnroorden
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property condicionesdepagoColumn() As System.Data.DataColumn
            Get
                Return Me.columncondicionesdepago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property causaColumn() As System.Data.DataColumn
            Get
                Return Me.columncausa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idestadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnidestado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idproveedorColumn() As System.Data.DataColumn
            Get
                Return Me.columnidproveedor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr4Column() As System.Data.DataColumn
            Get
                Return Me.columnExpr4
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idtipomateriaprimaColumn() As System.Data.DataColumn
            Get
                Return Me.columnidtipomateriaprima
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columncantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precioColumn() As System.Data.DataColumn
            Get
                Return Me.columnprecio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr5Column() As System.Data.DataColumn
            Get
                Return Me.columnExpr5
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ordencomprampRow
            Get
                Return CType(Me.Rows(index),ordencomprampRow)
            End Get
        End Property
        
        Public Event ordencomprampRowChanging As ordencomprampRowChangeEventHandler
        
        Public Event ordencomprampRowChanged As ordencomprampRowChangeEventHandler
        
        Public Event ordencomprampRowDeleting As ordencomprampRowChangeEventHandler
        
        Public Event ordencomprampRowDeleted As ordencomprampRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddordencomprampRow(ByVal row As ordencomprampRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddordencomprampRow( _
                    ByVal Expr1 As Integer,  _
                    ByVal nombre As String,  _
                    ByVal Expr2 As Integer,  _
                    ByVal Expr3 As String,  _
                    ByVal fecharealizacion As Date,  _
                    ByVal plazodeentrega As Date,  _
                    ByVal idordencompra As Integer,  _
                    ByVal nroorden As Integer,  _
                    ByVal condicionesdepago As String,  _
                    ByVal causa As String,  _
                    ByVal idestado As Integer,  _
                    ByVal idproveedor As Integer,  _
                    ByVal Expr4 As Integer,  _
                    ByVal idtipomateriaprima As Integer,  _
                    ByVal cantidad As Integer,  _
                    ByVal precio As Double,  _
                    ByVal Expr5 As Integer) As ordencomprampRow
            Dim rowordencomprampRow As ordencomprampRow = CType(Me.NewRow,ordencomprampRow)
            rowordencomprampRow.ItemArray = New Object() {Expr1, nombre, Expr2, Expr3, fecharealizacion, plazodeentrega, idordencompra, nroorden, condicionesdepago, causa, idestado, idproveedor, Expr4, idtipomateriaprima, cantidad, precio, Expr5}
            Me.Rows.Add(rowordencomprampRow)
            Return rowordencomprampRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByExpr1Expr2idordencompraExpr4idtipomateriaprimaExpr5(ByVal Expr1 As Integer, ByVal Expr2 As Integer, ByVal idordencompra As Integer, ByVal Expr4 As Integer, ByVal idtipomateriaprima As Integer, ByVal Expr5 As Integer) As ordencomprampRow
            Return CType(Me.Rows.Find(New Object() {Expr1, Expr2, idordencompra, Expr4, idtipomateriaprima, Expr5}),ordencomprampRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ordencomprampDataTable = CType(MyBase.Clone,ordencomprampDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ordencomprampDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnExpr2 = MyBase.Columns("Expr2")
            Me.columnExpr3 = MyBase.Columns("Expr3")
            Me.columnfecharealizacion = MyBase.Columns("fecharealizacion")
            Me.columnplazodeentrega = MyBase.Columns("plazodeentrega")
            Me.columnidordencompra = MyBase.Columns("idordencompra")
            Me.columnnroorden = MyBase.Columns("nroorden")
            Me.columncondicionesdepago = MyBase.Columns("condicionesdepago")
            Me.columncausa = MyBase.Columns("causa")
            Me.columnidestado = MyBase.Columns("idestado")
            Me.columnidproveedor = MyBase.Columns("idproveedor")
            Me.columnExpr4 = MyBase.Columns("Expr4")
            Me.columnidtipomateriaprima = MyBase.Columns("idtipomateriaprima")
            Me.columncantidad = MyBase.Columns("cantidad")
            Me.columnprecio = MyBase.Columns("precio")
            Me.columnExpr5 = MyBase.Columns("Expr5")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnExpr1 = New System.Data.DataColumn("Expr1", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnExpr2 = New System.Data.DataColumn("Expr2", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr2)
            Me.columnExpr3 = New System.Data.DataColumn("Expr3", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr3)
            Me.columnfecharealizacion = New System.Data.DataColumn("fecharealizacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecharealizacion)
            Me.columnplazodeentrega = New System.Data.DataColumn("plazodeentrega", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplazodeentrega)
            Me.columnidordencompra = New System.Data.DataColumn("idordencompra", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidordencompra)
            Me.columnnroorden = New System.Data.DataColumn("nroorden", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnroorden)
            Me.columncondicionesdepago = New System.Data.DataColumn("condicionesdepago", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncondicionesdepago)
            Me.columncausa = New System.Data.DataColumn("causa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncausa)
            Me.columnidestado = New System.Data.DataColumn("idestado", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidestado)
            Me.columnidproveedor = New System.Data.DataColumn("idproveedor", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidproveedor)
            Me.columnExpr4 = New System.Data.DataColumn("Expr4", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr4)
            Me.columnidtipomateriaprima = New System.Data.DataColumn("idtipomateriaprima", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidtipomateriaprima)
            Me.columncantidad = New System.Data.DataColumn("cantidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantidad)
            Me.columnprecio = New System.Data.DataColumn("precio", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio)
            Me.columnExpr5 = New System.Data.DataColumn("Expr5", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr5)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnExpr1, Me.columnExpr2, Me.columnidordencompra, Me.columnExpr4, Me.columnidtipomateriaprima, Me.columnExpr5}, true))
            Me.columnExpr1.AllowDBNull = false
            Me.columnExpr2.AllowDBNull = false
            Me.columnidordencompra.AllowDBNull = false
            Me.columnExpr4.AllowDBNull = false
            Me.columnidtipomateriaprima.AllowDBNull = false
            Me.columnExpr5.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewordencomprampRow() As ordencomprampRow
            Return CType(Me.NewRow,ordencomprampRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ordencomprampRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ordencomprampRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ordencomprampRowChangedEvent) Is Nothing) Then
                RaiseEvent ordencomprampRowChanged(Me, New ordencomprampRowChangeEvent(CType(e.Row,ordencomprampRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ordencomprampRowChangingEvent) Is Nothing) Then
                RaiseEvent ordencomprampRowChanging(Me, New ordencomprampRowChangeEvent(CType(e.Row,ordencomprampRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ordencomprampRowDeletedEvent) Is Nothing) Then
                RaiseEvent ordencomprampRowDeleted(Me, New ordencomprampRowChangeEvent(CType(e.Row,ordencomprampRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ordencomprampRowDeletingEvent) Is Nothing) Then
                RaiseEvent ordencomprampRowDeleting(Me, New ordencomprampRowChangeEvent(CType(e.Row,ordencomprampRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveordencomprampRow(ByVal row As ordencomprampRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsoc = New dsoc
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ordencomprampDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ordencomprampRow
        Inherits System.Data.DataRow
        
        Private tableordencompramp As ordencomprampDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableordencompramp = CType(Me.Table,ordencomprampDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Integer
            Get
                Return CType(Me(Me.tableordencompramp.Expr1Column),Integer)
            End Get
            Set
                Me(Me.tableordencompramp.Expr1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.nombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr2() As Integer
            Get
                Return CType(Me(Me.tableordencompramp.Expr2Column),Integer)
            End Get
            Set
                Me(Me.tableordencompramp.Expr2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr3() As String
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.Expr3Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Expr3' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.Expr3Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecharealizacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.fecharealizacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'fecharealizacion' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.fecharealizacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property plazodeentrega() As Date
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.plazodeentregaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'plazodeentrega' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.plazodeentregaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idordencompra() As Integer
            Get
                Return CType(Me(Me.tableordencompramp.idordencompraColumn),Integer)
            End Get
            Set
                Me(Me.tableordencompramp.idordencompraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nroorden() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.nroordenColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'nroorden' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.nroordenColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property condicionesdepago() As String
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.condicionesdepagoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'condicionesdepago' de la tabla 'ordencompramp' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.condicionesdepagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property causa() As String
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.causaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'causa' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.causaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idestado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.idestadoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idestado' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.idestadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idproveedor() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.idproveedorColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'idproveedor' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.idproveedorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr4() As Integer
            Get
                Return CType(Me(Me.tableordencompramp.Expr4Column),Integer)
            End Get
            Set
                Me(Me.tableordencompramp.Expr4Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idtipomateriaprima() As Integer
            Get
                Return CType(Me(Me.tableordencompramp.idtipomateriaprimaColumn),Integer)
            End Get
            Set
                Me(Me.tableordencompramp.idtipomateriaprimaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.cantidadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'cantidad' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.cantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tableordencompramp.precioColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'precio' de la tabla 'ordencompramp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableordencompramp.precioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr5() As Integer
            Get
                Return CType(Me(Me.tableordencompramp.Expr5Column),Integer)
            End Get
            Set
                Me(Me.tableordencompramp.Expr5Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.nombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tableordencompramp.nombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr3Null() As Boolean
            Return Me.IsNull(Me.tableordencompramp.Expr3Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr3Null()
            Me(Me.tableordencompramp.Expr3Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfecharealizacionNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.fecharealizacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfecharealizacionNull()
            Me(Me.tableordencompramp.fecharealizacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsplazodeentregaNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.plazodeentregaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetplazodeentregaNull()
            Me(Me.tableordencompramp.plazodeentregaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnroordenNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.nroordenColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnroordenNull()
            Me(Me.tableordencompramp.nroordenColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscondicionesdepagoNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.condicionesdepagoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcondicionesdepagoNull()
            Me(Me.tableordencompramp.condicionesdepagoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscausaNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.causaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcausaNull()
            Me(Me.tableordencompramp.causaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidestadoNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.idestadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidestadoNull()
            Me(Me.tableordencompramp.idestadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidproveedorNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.idproveedorColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidproveedorNull()
            Me(Me.tableordencompramp.idproveedorColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscantidadNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.cantidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcantidadNull()
            Me(Me.tableordencompramp.cantidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsprecioNull() As Boolean
            Return Me.IsNull(Me.tableordencompramp.precioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetprecioNull()
            Me(Me.tableordencompramp.precioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ordencomprampRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ordencomprampRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ordencomprampRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ordencomprampRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
